DBMS : 데이터베이스관리시스템
       데이터베이스를 관리하는 시스템

- 데이터 : 실제 값
- 정보 : 의미가 있는 데이터
- 데이터베이스 : 필요한 정보를 얻기 위해 연관된 데이터를 모아 통합해 놓은 것
- 데이터베이스 : 서로 관련된 데이터들을 일정한 체계와 순서로 모아 놓은 데이터의 집합
- 데이터베이스 : 현재 운영되는 정보를 통합하여 저장되어있으며 공용으로 사용 되어야 함
                 (중복은 최소화)

- 데이터베이스의 특징: 
  * 실시간 접근,  
  * 계속적인 변화(삽입,삭제,수정), 
  * 동시공유, 
  * 내용에 따른 참조(검색) : 데이터값에 따라 정보를 찾을 수 있음



- 스왑메모리 : 데이터처리를 위한 메모리 용량을 확보하기 위해 
               하드디스크의 저장 장치를 메모리로 사용
               메모리의 크기는 데이터 처리 성능에 영향을 미친다.

- 관계형 데이터베이스 ( 오라클, MySQL, MariaDB, MsSQL )
  : 테이블(표) 형태로 만들어진 데이터베이스
  : 행과 열로 이루어짐

  행 : 튜플, row , 레코드, 
  열 : 컬럼, 속성(애트리뷰트)
  도메인 : 열의 데이터의 타입과 크기, 제약조건등을 지정하는 정보 

  스키마 : 데이버베이스, 테이블의 구조
           외부스키마, 개념스키마, 내부스키마 
     외부스키마 : 사용자가 보는 데이터, 서브키마,               => 논리스키마 
     개념스키마 : 전체 데이터, 외부스키마를 하나로 통합한 것    => 논리스키마      
     내부스키마 : 물리적 저장장치에 실제로 저장되는 방법을 표현 => 물리스키마 

- 기본키(PK,Primary key) : 튜플을 식별할 수 있는 고유한 값을 가져야 한다.(유일키(UNIQUE) 
                            NUll값이 아니어야 한다. (NOT NUll) 
 - 외래키(FK, foreing key) : 어느 테이블에서는 기본키이지만 다른테이블에서는 하나의 컬럼으로만 
                             존재하는 컬럼 

==========================================================================================
 오라클 설치 후 일반용 계정 환경설정
 - 오라클 설치 폴더는 일반적인 설치 폴더를 사용 ( 한글이 있으면 실행안됨)
 - 오라클 설치 중간에 비번 입력 : 슈퍼관리자 비번을 물어본다. (oracle)
 - 오라클 리스너 포트 번호 : 1521
 - 슈퍼관리자의 아이디 : system,  비번 : 설치할 때 입력한 비밀번호 

 오라클 설치 완료 후 진행 사항
 1) (윈도우 + r) cmd  => cmd 창:  sqlplus

   Microsoft Windows [Version 10.0.17763.1217]
   (c) 2018 Microsoft Corporation. All rights reserved.

   C:\Users\user>sqlplus

   SQL*Plus: Release 18.0.0.0.0 - Production on 월 6월 1 11:46:40 2020
   Version 18.4.0.0.0

   Copyright (c) 1982, 2018, Oracle.  All rights reserved.

   사용자명 입력: system
   비밀번호 입력: (설치시 작성한 비빌번호)
   마지막 성공한 로그인 시간: 월 6월  01 2020 11:21:21 +09:00

   다음에 접속됨:
   Oracle Database 18c Express Edition Release 18.0.0.0.0 - Production
   Version 18.4.0.0.0

   SQL> exit
 2) SQL Develeper 실행
  - 자바 JDK 위치 설정(C:\Program Files\Java\jdk1.8.0_251)하면 자동실행된다.(맨처음 한번만)
  - 오라클 데이터베이스에 접속 하기 
    -> Oracle 접속 마우스 오른쪽 눌러 새접속 클릭
    -> 설정 후 테스트에서 성공이 나오면 접속 버튼 클릭
=================================================================
-- 일반 계정 만들기 
-- CREATE USER c##내계정 IDENTIFIED BY 비번 ;
-- 오라클 12c부터는 공통계정앞에 c##을 붙이도록 네이밍 규칙변경
> CREATE USER c##nohsam IDENTIFIED BY 1111 ; 

-- 내 계정에 접속 권한과 자원 사용 권한을 부여 하자
-- GRANT : 권한 부여 명령어,  
> GRANT CONNECT, RESOURCE TO c##nohsam ;

==========   내 계정에 접속 =======================
-- 현재 구성된 테이블 보기 : select * from tab;
-- 테이블 구조 (스키마보기) : desc 테이블이름 ;
> SELECT * FROM TAB;
> DESC 테이블이름;
====================================================
 
SQL : Structured Query Language ( 구조화 질의어)는 관계형 데이터베이스 관리 시스템(RDBMS)의 
      데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍 언어이다. 

 - SQL 기능에 따른 분류
  1) DDL(데이터정의어) : 데이터 베이스 객체를 정의하는 언어, 
      => CREATE(생성), ALTER(변경), DROP(삭제)  

  2) DML(데이터조작어) : 테이블에 존재하는 데이터를 검색, 삽입 ,수정, 삭제에 사용되는 언어
     SELECT (검색),  INSERT(삽입), UPDATE(수정), DELETE(삭제)
 
  3) DCL(데이터제어어) : 데이터의 사용 권한을 관리하는데 사용하는 언어
     슈퍼계정: GRANT(권한부여),  REVOKE(권한회수)

========================================================================================
오라클 자료형(datatype) 
 
  1) 숫자 : 정수 => number(), number(4) (전체 4자리 수)
            실수 =>  number(),number(4,1) (전체 4자리수, 소수점 자리수)

  2) 문자 : 고정길이 => char(크기)
            가변길이 => varchar2(크기) => 4KB
            varchar2 보다 많은 양은 clob(크기) => 4GB
    ** 영문자 대소문자,숫자 => 1byte,  영어 숫자 제외한 글자 => 3byte     

  3) 날짜 : date('2020/06/01')  

  ** 문자, 날짜는 반드시 홑따옴표를 사용해야 된다.

=================================================================================================
DDL(데이터 정의어) : CREATE, DROP, ALTER

 ** 테이블 생성 (CREATE) 문법
  : 기본적으로 테이블에는 PRIMARY KEY가 존재해야 된다.
 
  방법1) : PRIMARY KEY가 하나일때만 가능
  CREATE TABLE 테이블이름 (
      컬럼이름 datatype NOT NULL PRIMARY KEY,
      컬럼이름 datatype,
      컬럼이름 datatype,
      컬럼이름 datatype
  );

  방법2) : PRIMARY KEY가 하나 또는 여러개 일때 모두 가능
  CREATE TABLE 테이블이름 (
      컬럼이름1 datatype NOT NULL,
      컬럼이름2 datatype NOT NULL,
      컬럼이름 datatype,
      컬럼이름 datatype,
      PRIMARY KEY (컬럼이름1)
      PRIMARY KEY (컬럼이름1, 컬럼이름2)
  );

실행)
방법1)
CREATE TABLE member01(
  idx NUMBER NOT NULL PRIMARY KEY,
  m_id VARCHAR2(50),
  m_pw VARCHAR2(50),
  m_name VARCHAR2(50),
  m_age  NUMBER(3),
  m_reg date 
);

방법2)
CREATE TABLE member02(
  idx NUMBER NOT NULL,
  m_id VARCHAR2(50),
  m_pw VARCHAR2(50),
  m_name VARCHAR2(50),
  m_age  NUMBER(3),
  m_reg date,
  PRIMARY KEY(idx)
);

오류발생
CREATE TABLE member03(
  idx NUMBER NOT NULL PRIMARY KEY,
  m_id VARCHAR2(50) NOT NULL PRIMARY KEY,
  m_pw VARCHAR2(50),
  m_name VARCHAR2(50),
  m_age  NUMBER(3),
  m_reg date
  );

CREATE TABLE member03(
  idx NUMBER NOT NULL ,
  m_id VARCHAR2(50) NOT NULL ,
  m_pw VARCHAR2(50),
  m_name VARCHAR2(50),
  m_age  NUMBER(3),
  m_reg date,
  PRIMARY KEY (idx, m_id)
  );

** 테이블 삭제 (DROP) 문법 :   DROP TABLE 테이블이름;
DROP TABLE MEMBER02;

** 테이블 복사 :
구조와 내용(데이터)을 모두 복사 
 CAEATE TABLE 복사본 테이블 AS SELECT * FROM 복사할 테이블 ;

구조만 복사
 CAEATE TABLE 복사본 테이블 AS SELECT * FROM 복사할 테이블 WHERE 1 = 0;


 예제1)
 book 테이블 만들기 
 도서번호(bookid,pk),  도서이름(bookname, 99), 출판사(publisher,50), 가격(price,7)
  CREATE TABLE book(
   bookid NUMBER NOT NULL PRIMARY KEY,
   bookname VARCHAR2(99) ,
   publisher VARCHAR2(50),
   price NUMBER(7)
 );
  
 예제2) book 테이블을 구조와 내용 모두 복사 해서 bookcopy 테이블 만들기 
 CREATE TABLE bookcopy AS SELECT * FROM book ; 
 

- 데이터베이스 객체 변경 : ALTER
 --  컬럼 추가(add) : ALTER TABLE 테이블이릅 ADD 컬럼명 자료형(크기);
     ALTER TABLE MEMBER01 ADD m_addr VARCHAR2(50);
     
 --  컬럼 삭제(drop) : ALTER TABLE 테이블이름 DROP COLUMN 컬럼명 ;
    ALTER TABLE member01 DROP COLUMN m_addr ;

 --  컬럼 변경(modify):    ALTER TABLE 테이블이름 MODIFY 컬럼명 자료형(크기);
     --- 데이터가 있는 경우 
     --- 해당 컬럼에 데이터가 있으면 컬럼의 자료형은 변경할 수 없다.
     --- 현재 가지고 있는 데이터의 크기보다 크게 변경할 수 있다.
     --- 현재 가지고 있는 데이터의 크기보다 작게는 변경할 수 없다.
     
     --- 데이터가 없는 경우 : 컬럼의 자료형과 크기를 마음대로 변경할 수 있다.
         ALTER TABLE member01 MODIFY m_age VARCHAR2(50);
         ALTER TABLE member01 MODIFY m_age NUMBER(3);


  -- 테이블이름 변경하기 :  ALTER TABLE 기본이름 rename to 새이름 ;
       ALTER TABLE member01 rename to members ;

================================================================================
슈퍼계정에서 tablespace 확보하기 
alter user [계정명] default tablespace users quota unlimited on users;
=================================================================================

DML : 데이터 조작어 
- 삽입 (insert into)
- 갱신 (update set)
- 삭제 (delete from)
- 검색 (select from)

- commit   : 현재 상태를 DB에 저장
- rollback : 이전 상태로 되돌리기 


삽입 : 데이터를 해당 테이블에 저장하는 것

  방법1)  insert into 테이블이름 values(데이터(값),....) ;
     - 값은 순서대로 모두 채워야 한다.
     - 문자와 날짜는 반드시 '' 사용
     - 중간에 비어있으면 오류발생
     - 값을 넣기 싫으면  null 이라도 넣어야 하다.
     - 속성이 not null 인 컬럼은 반드시 데이터를 넣어야 한다.

insert into members values(1, 'hong', 'h111', '홍길동', 27, '2020/06/01' );
insert into members values(2, 'hong', 'h111', '홍길동', 27, '2020/06/01' );
insert into members values(3, 'hong', 'h111', '홍길동', null, null );

-- insert into members values(4, 'hong', 'h111', '홍길동'  ); 모든 정보를 입력안해서 오류
insert into members values(4, null, null, '홍길동', null, null ); 

-- 속성이 NOT NULL 인데  NULL을 넣으면 오류 발생
-- insert into members values(null, 'hong', 'h111', '홍길동', 27, '2020/06/01' ); 


방법2)  insert into 테이블이름(컬럼명,...) values(데이터(값),....) ;
  - 넣고 싶은 데이터의 컬러명과 데이터만 입력
  insert into members(idx, m_id, m_pw) values(5, 'kang', 'k111');
 
예시1) book 테이블에 데이터 입력하기 
insert into book values(1,'축구의 역사', '굿스포츠',7000);
insert into book values(2,'축구아는 여자', '나무수',13000);
insert into book values(3,'축구의 이해', '대한미디어',22000);
insert into book values(4,'골프 바이블', '대한미디어',35000);
insert into book values(5,'피겨 교본', '굿스포츠',8000);

COMMIT;

테이블의 모든 내용 검색 : select * from 테이블이름

-- BOOK 테이블의 구조와 내용 복사하기 (CPBOOK 테이블)
CREATE TABLE CPBOOK AS SELECT * FROM BOOK;

-- BOOK 테이블 구조만 복사하기 (BOOKCP 테이블)
CREATE TABLE BOOKCP AS SELECT * FROM BOOK WHERE 1 = 0 ;

insert into book values(6,'역도 단계별기술', '굿스포츠',6000);
insert into book values(7,'야구의 추억', '이상미디어',20000);
insert into book values(8,'야구를 부탁해', '이상미디어',13000);
insert into book values(9,'올림픽 이양기', '삼성당',700);
insert into book values(10,'Olympic Champions', 'Pearson',13000);
commit;

CREATE TABLE CUSTOMER(
 custid number not null PRIMARY key ,
 name VARCHAR2(50),
 addree VARCHAR2(50),
 phone VARCHAR2(50)
);

insert into CUSTOMER values(1,'박지성', '영국 맨체스타','0100-5000-0001');
insert into CUSTOMER values(2,'김연아', '대한민국 서울','0100-6000-0001');
insert into CUSTOMER values(3,'장미란', '대한민국 강원도','0100-7000-0001');
insert into CUSTOMER values(4,'추신수', '미국 클리블랜드','0100-8000-0001');
insert into CUSTOMER values(5,'박세리', '대한미국 대전', null);
commit;

=============================================================================
-- 데이터베이스 객체 변경 : ALTER
 --  컬럼 추가(add) : ALTER TABLE 테이블이릅 ADD 컬럼명 자료형(크기);
     ALTER TABLE MEMBER01 ADD m_addr VARCHAR2(50);
     
 --  컬럼 삭제(drop) : ALTER TABLE 테이블이름 DROP COLUMN 컬럼명 ;
    ALTER TABLE member01 DROP COLUMN m_addr ;
 
 --  컬럼 변경(modify):  
     -- 해당컬럼에 데이터가 있으면 변경할 수 없다.
     -- 데이터가 있는 경우 
     -- 현재 가지고 있는 데이터의 크기보다 크게 변경할 수 있다.
     -- 현재 가지고 있는 데이터의 크기보다 작게는 변경할 수 없다.
     -- 데이터가 없는 경우 : 컬럼의 자료형과 크기를 마음대로 변경할 수 있다.
     
     ALTER TABLE member01 MODIFY m_age VARCHAR2(50);

CREATE TABLE orders (
  orderid NUMBER NOT NULL PRIMARY KEY,
  custid NUMBER NOT NULL,
  bookid NUMBER NOT NULL,
  saleprice NUMBER,
  orderdate DATE
);

INSERT INTO orders VALUES(1, 1, 1, 6000,'2014-07-01');
INSERT INTO orders VALUES(2, 1, 3, 21000,'2014-07-03');
INSERT INTO orders VALUES(3, 2, 5, 8000,'2014-07-03');
INSERT INTO orders VALUES(4, 3, 6, 6000,'2014-07-04');
INSERT INTO orders VALUES(5, 4, 7, 20000,'2014-07-05');
INSERT INTO orders VALUES(6, 1, 2, 12000,'2014-07-07');
INSERT INTO orders VALUES(7, 4, 8, 13000,'2014-07-07');
INSERT INTO orders VALUES(8, 3, 10,12000,'2014-07-08');
INSERT INTO orders VALUES(9, 2, 10, 7000,'2014-07-09');
INSERT INTO orders VALUES(10, 3, 8,13000,'2014-07-10');
commit;

==========================================================================
-- commit ;   현재상태를 DB에 저장하는 한다.
-- rollback;  이전상태로 데이터를 되돌린다.

-- 수정(update)과 삭제(delete)는 조건을 지정 않으면
-- 전체 수정, 전체 삭제가 된다.

-- update 테이블명 set 변경내용, 변경내용 [ where절(조건절) ]
=======================================================================
commit;

select * from book;

update book set price = 40000 ;

ROLLBACK;

update book set price = 40000 where bookid = 4 ;
-- 출판사가 Pearson 책들이 10% 올랐다 수정하자
update book set price = (price + price*0.1) where publisher ='Pearson';
-- 출판사가 굿스포츠 책들이 10% 올랐다 수정하자
update book set price = (price*1.1) where publisher ='굿스포츠';

-- delete from 테이블이름 [where절(조건절)]
-- 테이블 전체가 삭제됨
delete from book ;
-- 이전 상탤로 되돌리기 
rollback;

select * from book;
commit;

-- book 테이블에서 출판사가 굿스포츠인 데이터 삭제하기 
delete from book where publisher='굿스포츠';
rollback;
========================================================================
-- select [ * | distinct | 컬럼명....]
-- from  테이블이름
-- [where 조건식 ]  
-- [having 조건식 ]
-- [group by 컬럼명 ]
-- [order by 컬러명 asc | desc ]
-- asc 오름차순,  desc 내림차순
-- 보통 조건식은 비교연산(=, >=, <=)

-- 모든 도서의 이름과 가격을 검색하시오 (book테이블)
--  book 테이블의 모든 데이터 검색
select * FROM book ;
select bookname, price from book;
select price, bookname from book;

-- 모든 도서의 도서번호,  도서이름, 출판사, 가격을 검색하시오.
select bookid, bookname, publisher, price from book;
select * FROM book ;

-- 도서 테이블에 있는 모든 출판사를 검색하시오 
select publisher from book; 

-- 검색결과에서 중복을 제거하고 싶으면 distinct 키워드를 사용
-- 주의 사항 : 다른 컬럼과 함께 사용하면 안된다.
select DISTINCT publisher from book; 
select DISTINCT publisher, bookname from book; 

-- where 조건절에 사용되는 술어
-- 1. 비교연산 ( =, >=, >, <=, <, <> )
--  가격이 20,000원 미만인 도서를 검색하시오. (book테이블)
 select * from book WHERE price < 20000 ;
 
  
-- 가격이 10,000원 이상 20,000 이하인 도서를 검색하시오(book테이블)
 -- 비교연산 ( = )과 and
 SELECT * FROM book where price >= 10000 and price <= 20000;
 
 -- 범위 ( 컬럼명 BETWEEN A AND B ) : A 부터 B 까지
 SELECT * FROM book where price BETWEEN  10000 and  20000;

-- 출판사가 ‘굿스포츠’ 혹은 ‘대한미디어’인 도서를 검색하시오
 -- 비교연산 ( = )과 or
 SELECT * FROM book where publisher = '굿스포츠' or publisher = '대한미디어';
 -- 집합 ( 컬럼명 IN ( ))
 SELECT * FROM book where publisher IN( '굿스포츠' , '대한미디어');

-- 출판사가 ‘굿스포츠’ 혹은 ‘대한미디어’인 아닌 도서를 검색하시오
-- 비교연산 ( <> )과 and
 SELECT * FROM book where publisher <> '굿스포츠' and publisher <> '대한미디어';
 
 -- 집합 ( 컬럼명 NOT IN  ( ))
 SELECT * FROM book where publisher NOT IN ( '굿스포츠' , '대한미디어');


-- ‘축구의 역사’를 출간한 출판사를 검색하시오.
-- 비교연산 (=)
select publisher from book where bookname = '축구의 역사';
-- like에 % 를 붙이지 않으면 같다와 같은 의미 
select publisher from book where bookname like '축구의 역사';

-- 도서이름에 ‘축구’가 포함된 출판사를 검색하시오
-- 도서이름이 '축구'는 없으므로 안 나온다.
select publisher from book where bookname = '축구';

-- like는 포함된 검색어를 사용할 때 사용 (% : 모든문자, _ : 한 글자 )
select publisher from book where bookname like '축구%'; -- 추구로 시작하는 
select publisher from book where bookname like '%축구'; -- 축구로 끝나는  
select publisher from book where bookname like '%축구%'; -- 축구를 포함하는

-- 도서이름의 왼쪽 두 번째 위치에 ‘구’라는 문자열을 갖는 도서를 검색하시오.
select publisher from book where bookname like '_구%';
SELECT * FROM orders ;

-- 1,3,5,7,9의 자료의 날짜 변경--
update orders set orderdate='15/04/15' where orderid = 1 or orderid = 3 or orderid = 5;
update orders set orderdate='15/04/15' where orderid in (7,9);

-- orders 테이블에서 orderdate가 15년인 모든 정보 보기 
select * from  orders where orderdate >='15/01/01' and orderdate <='15/12/31';
select * from  orders where orderdate BETWEEN '15/01/01' and '15/12/31';
select * from  orders where orderdate like '15%';

-- 축구에 관한 도서 중 가격이 20,000원 이상인 도서를 검색하시오.
select * from book where  bookname like '%축구%' and price >= 20000;

-- 출판사가 ‘굿스포츠’ 혹은 ‘대한미디어’인 도서를 검색하시오
select * from book where publisher = '굿스포츠' or publisher = '대한미디어' ;
select * from book where publisher in ('굿스포츠' , '대한미디어') ;

================================================================================
집계함수 : sum(),  avg(), max(), min(), count()

select * from orders;
-- 집계함수 :  sum(컬럼명), avg(컬럼명), max(컬럼명), min(컬럼명), count(*)
 
-- 고객이 주문한 도서의 총 판매액을 구하시오.
-- sum(컬럼명) : 총 합계,
select  sum(saleprice) from orders;

-- 컬럼명 as 별칭, 컬럼명 별칭
select  sum(saleprice) as 총합계 from orders;
select  sum(saleprice) 총매출합계 from orders;

-- 2번 김연아 고객이 주문한 도서의 총 판매액을 구하시오
select sum(saleprice) 총판매액 from orders WHERE custid = 2;

-- 고객이 주문한 도서의 총 판매액, 평균값, 최저가, 최고가를 구하시오
select sum(saleprice), avg(saleprice), min(saleprice), max(saleprice) from orders;

-- 마당서점의 도서 판매 건수를 구하시오.
select count(*) from orders;

-- 2번 김연아 고객이 주문한 도서 판매 건수를 구하시오.
select count(*) from orders WHERE custid = 2;

======================================================================
GROUP BY : 속성값이 같은 것 끼리 그룹을 만든다.
           집합함수도 사용 할 수 있다.


-- 고객별로  주문한 도서의 총 수량과 총 판매액을 구하시오.
-- 주의: GROUP BY 에 사용된 컬럼은 select 에 사용할 수 있다.
-- 즉 select문 에는 집합함수와 GROUP BY 에 사용된 컬럼만 들어갈 수 있다.
select custid, count(*), sum(saleprice)
from orders 
GROUP BY custid;

-- 가격이 8,000원 이상인 도서를 구매한 고객에 대하여 
-- 고객별 주문 도서의 총 수량을 구하시오. 단, 세 권 이상 구매한 고객만 구한다.
-- GROUP BY 에서 select 에 사용될수 있는 컬럼을 조건으로 사용하기 위해서는 having를 사용한다.

-- 고객별 주문 도서의 총 수량을 구하시오. 단, 세 권 이상 구매한 고객만
select count(*)
from orders
GROUP BY custid
HAVING custid >=3 ;

-- 가격이 8,000원 이상인 도서를 구매한 고객에 대하여 
-- 고객별 주문 도서의 총 수량을 구하시오. 단, 세 권 이상 구매한 고객만 구한다.
=-- GROUP BY 에서 select에 사용될 수 없는 컬럼 조건는 where를 사용한다.
select count(*)
from orders
where saleprice >= 8000
GROUP BY custid
HAVING custid >=3 ;

-- 연습문제 -- 
  --- (1) 도서번호가 1인 도서의 이름
       select bookname from book where bookid = 1 ;
  --- (2) 가격이 20,000원 이상인 도서의 이름
        select bookname from book where price >= 20000;
  --- (3) 박지성의 총 구매액(박지성의 고객번호는 1번으로 놓고 작성)
        select sum(saleprice) from orders where custid = 1 ;
  --- (4) 박지성이 구매한 도서의 수(박지성의 고객번호는 1번으로 놓고 작성)
      select count(*) from orders where custid = 1 ;

  --- (1) 마당서점 도서의 총 개수
        select count(*) from book;
  --- (2) 마당서점에 도서를 출고하는 출판사의 총 개수
        select count(DISTINCT publisher) from book ;
  --- (3) 모든 고객의 이름, 주소
        select name, addree from customer;
  --- (4) 2014년 7월 4일~7월 7일 사이에 주문받은 도서의 주문번호
        select orderid from orders where orderdate >= '2014/07/04' and orderdate <= '2014/07/07';
        select orderid from orders where orderdate BETWEEN  '2014/07/04' and  '2014/07/07' ;
  --- (5) 2014년 7월 4일~7월 7일 사이에 주문받은 도서를 제외한 도서의 주문번호
        select orderid from orders where orderdate < '2014/07/04' or orderdate > '2014/07/07';
        select orderid from orders where orderdate NOT BETWEEN  '2014/07/04' and  '2014/07/07' ;
  --- (6) 성이 ‘김’ 씨인 고객의 이름과 주소
        select name, addree from customer where name like '김%'; 
  --- (7) 성이 ‘김’ 씨이고 이름이 ‘아’로 끝나는 고객의 이름과 주소
         select name, addree from customer where name like '김%아'; 

====================================================================================

-- 조인 : 2개이상의 테이블을 사용해서 퀴리문을 작성하는 것
  -- 내부조인 : 여러 테이블의 공통적으로 존재하는 컬럼의 값이 일치되는 행을 연결
  --             보통은 FK(외래키)를 이용해서 테이블과 테이블을 연결
  -- 컬럼명 => 테이블이름.컬럼명
-- orders테이블과 customer테이블의 모든 정보 보기 (조인X)
select * 
from orders, customer;

-- 고객과 고객의 주문에 관한 데이터를 모두 보이시오.
select * 
from orders, customer 
where orders.custid = customer.custid;

select * 
from  customer ,orders
where orders.custid = customer.custid
 
-- 고객과 고객의 주문에 관한 데이터를 고객번호 순으로 정렬하여 보이시오
select * 
from customer, orders
where orders.custid = customer.custid
order by orders.custid;

-- 고객의 이름과 고객이 주문한 도서의 판매가격을 검색하시오.
select customer.name, orders.saleprice
from  customer, orders
where orders.custid = customer.custid;

-- 별칭 사용 :  원래이름 별칭
select c.name, o.saleprice
from  customer c, orders o
where o.custid = c.custid;

-- 고객id로 주문한 모든 도서의 총 판매액을 구하고 고객id로 저열
select o.custid, sum(o.saleprice)
from orders o
group by o.custid
order by o.custid;

-- 고객별(이름)로 주문한 모든 도서의 총 판매액을 구하고, 고객이름으로 정렬하시오.
select c.name, sum(o.saleprice)
from orders o, customer c 
where o.custid = c.custid
group by c.name
order by c.name;

-- 고객의 이름과 고객이 주문한 도서의 이름을 구하시오.
select c.name, b.bookname, b.price
from customer c, orders o, book b
where c.custid = o.custid and o.bookid = b.bookid
order by c.name; 

-- 가격이 20,000원인 도서를 주문한 고객의 이름과 도서의 이름을 구하시오.
select c.name, b.bookname
from customer c, orders o, book b
where c.custid = o.custid and o.bookid = b.bookid and b.price = 20000
order by c.name; 

====================================================================================

-- 서브쿼리 : 쿼리 안에 쿼리를 작성하는 것
   --- 단일행 연산자 :  결과 한 줄  => 비교연산
   --- 다중행 연산자 :  결과 여러줄 => in, any, all, exists ;
   
   -- 가장 비싼 도서의 이름을 보이시오.
   -- select bookname, max(price)from book ; (오류)
   
   -- 가장 비싼 도서의 금액 검색 : 40000
   select max(price)from book ; 
   -- 40000원 도서의 이름을 검색 ;
   select bookname from book where price = 40000 ;
   
   -- subQuery 
   select bookname from book where price = (select max(price)from book) ;


--  도서를 구매한 적이 있는 고객의 이름을 검색하시오.
 -- 도서를 구매한 적이 있는 자료를 검색
  select DISTINCT custid  from orders;
  -- in (or 개념)
  select name from customer where custid in (select  custid  from orders);
  
  select DISTINCT  c.name
  from orders o, customer c
  where o.custid = c.custid ;
  
  -- 대한미디어에서 출판한 도서를 구매한 고객의 이름을 보이시오.
   -- 대한미디어에서 출판한 책의 id
   select bookid from book where publisher ='대한미디어'; -- 3, 4
   select custid from orders WHERE bookid in (3, 4) ;   -- 1
   select name from customer where custid in (1) ;
   
   select name from customer 
   where custid in ( select custid from orders 
                     WHERE bookid in (select bookid from book 
                                       where publisher ='대한미디어')) ;
  select DISTINCT c.name
 from orders o, customer c, book b
 where o.custid = c.custid and o.bookid = b.bookid and b.publisher ='대한미디어';
 
 -- _구로 시작한 책을 구입한 사람
 select DISTINCT c.name
 from orders o, customer c, book b
 where o.custid = c.custid and o.bookid = b.bookid and b.bookname like '_구%';
 
 select name from customer 
   where custid in ( select custid from orders 
                     WHERE bookid in (select bookid from book 
                                       where bookname like  '_구%')) ;

    
  -- 평균 도서 가격보다 비싼 도서이름 를 구하시오.  
  -- select avg(price) from book GROUP by publisher;
  -- select bookname from book where price > (select avg(price) from book GROUP by publisher) ;
  
  -- 상관 부속 질의 : 상위 부속 질의 튜플를 이용하여 하위 부속 질의를 계산함.
  --              ( 상위 부속 질의와 하위 부속질의가 독립적이지 않고 설로 관련을 맺고 있음)
  -- 출판사별 평균 도서 가격보다 비싼 도서이름 를 구하시오.
    select b1.bookname , b1.publisher
    from book b1
    where b1.price >(select avg(price)from book b2 where b1.publisher = b2.publisher);

 MINUS : 차집합
-- 도서를 주문하지 않은 고객의 이름을 보이시오.
-- 모든 고객 - 도서를 주문한 고객

 select name
 from customer
 MINUS
 select name
 from customer
 WHERE custid in (select custid from orders);

 -- EXISTS : 조건이 맞는 튜플이 존재하면 결과에 포함 시킴
 -- NOT EXISTS : 부속질의문의 모든 행이 조건에 만족하지 않을 때 포함
 
 -- 주문이 있는 고객의 이름과 주소를 보이시오
 select * from orders ;
 select name, addree from customer ;
 
 select name, addree 
 from customer c 
 where EXISTS( select * from orders o where c.custid = o.custid );

=======================================================================================
내장함수
dual : 출력결과를 보기 위해 오라클에서 제공하는 가상 테이블
1. 숫자관련 내장 함수들
 1) 절대값 : ABS(숫자)
  SELECT abs(-75), abs(75), abs(+75), abs(-3.14), abs(3.14) FROM dual;

 2) 올림 : ceil(숫자) , 자릿수 지정이 없음, 소숫점 기준
SELECT ceil(-75.41), ceil(75.41), ceil(+75.61), ceil(-3.41), ceil(3.51) FROM dual;

 3) 버림 : floor(숫자),  자릿수 지정이 없음, 소숫점 기준
SELECT floor(-75.41), floor(75.41), floor(+75.61), floor(-3.41), floor(3.51) 
FROM dual; 

 4) 버림 : trunc(숫자), trunc(숫자,자릿수) 
SELECT trunc(-75.41), trunc(75.41), trunc(+75.61), trunc(-3.41), trunc(3.51) 
FROM dual; 
SELECT trunc(-75.41,0), trunc(75.41,0), trunc(+75.61,0), trunc(-3.41,0),
trunc(3.51,0) FROM dual; 
SELECT trunc(-75.41,1), trunc(75.41,1), trunc(+75.61,1), trunc(-3.41,1),
trunc(3.51,1) FROM dual; 
SELECT trunc(-75.41,-1), trunc(75.41,-1), trunc(+75.61,-11), trunc(-3.41,-1),
trunc(3.51,-1) FROM dual; 

5) 반올림 : round(숫자), round(숫자, 자릿수)
select round(13.4441),round(-13.4441), round(13.5541), round(-13.5541)
from dual;
select round(13.4441,0),round(-13.4441,0), round(13.5541,0), round(-13.5541,0)
from dual;
select round(13.4441,1),round(-13.4441,1), round(13.5541,1), round(-13.5541,1)
from dual;
select round(14.4441,-1),round(-14.4441,-1), round(15.5541,-1), round(-15.5541,-1)
from dual;

6) power(숫자, 숫자) : N의 제곱근
select power(2,3), power(3,2) from dual;
 
7) sqrt(숫자) : 제곱근
select sqrt(4), sqrt(9), sqrt(10),trunc(sqrt(10),1) from dual;

8) sign(정수): 음수 -1,  양수 1
select sign(24), sign(-24), sign(24.14), sign(-24.24) from dual ;

9) mod : 나눈 나머지 
select mod(27,2), mod(27,3), mod(27,4) from dual;
======================================================================================

문자함수
1.chr(아스키코드숫자) : 아스키코드숫자를 받아서 문자로 표시 
 select chr(65), chr(97), chr(48) from dual;
2.concat(문자열, 문자열) : 두 문자열을 결합
 select concat('ICT','인재개발원') from dual;
3.initcap(문자열) :첫글자를 대문자 나머지를 소문자로 만듬
 select initcap('boys'), initcap('BOYS'), initcap('대한민국')from dual;
4.lower(문자열) : 모든글자 소문자로 만듬
5.upper(문자열) : 모든글자 대문자로 만듬
 select lower('KOREA'), lower('KoRea'),upper('korea'), upper('KoRea') from dual;
6.trim(문자열) : 양쪽공백제거
7.ltrim(문자열) : 왼쪽 공백 제거 
8.rtrim(문자열) : 오른쪽 공백 제거 
9.length(문자열) : 문자열의 길이
 select trim('  oracle xe 18  '),ltrim('   oracle xe 18  '),rtrim('  oracle xe 18  ')
 from dual;
  select 
   length(trim('  oracle xe 18  ')),
   length(ltrim('   oracle xe 18  ')),
   length(rtrim('  oracle xe 18  '))
 from dual;

10.lpad(문자열, 자릿수, 왼쪽공백을 메울 문자) : 자릿수가 모자르면 잘린다.
11.rpad(문자열, 자릿수, 오른쪽공백을 메울 문자) : 자릿수가 모자르면 잘린다.
select lpad('oracle xe', 20, '@'), rpad('oracle xe', 20, '^')
from dual;
select lpad('oracle xe', 5, '@'), rpad('oracle xe', 5, '^')
from dual;
12.substr(문자열,시작위치,갯수): 시작위치는 1부터 , -는 오른쪽 출발
select substr('abcdefgh', 2,2),
      substr('abcdefgh', -2,2),
      substr('abcdefgh', -3,5),
      substr('abcdefgh', -5,3) from dual;
13. replace(문자열, 변경할문자, 변경문자)
select replace('JACK and JUE', 'J', 'BL') from dual;

14. ASCII('아스키문자') : 숫자로 나타냄 ( chr()의 반대)
select ASCII('A'), ASCII('a'), ASCII('0') from dual;
15. instr(문자열, 찾는문자열,시작위치): 문자열에서 찾는 문자열의 위치 표치, index 1 부터
select instr('77070-1077999','-')from dual ; -- 6
select instr('77070-1077999','0')from dual ; -- 3(첫번째 0찾기)
select instr('77070-1077999','0',1,1)from dual ; -- 3(첫번째 0찾기)
select instr('77070-1077999','0',1,2)from dual ; -- 3(두번째 0찾기)
select instr('77070-1077999','0',1,3)from dual ; -- 3(세번째 0찾기)
select instr('77070-1077999','0',-1,1)from dual ; -- 3(첫번째 0찾기)
select instr('77070-1077999','0',-1,2)from dual ; -- 3(두번째 0찾기)
select instr('77070-1077999','0',-1,3)from dual ; -- 3(세번째 0찾기)

===========================================================================

날짜/시간 함수
1. sysdate: 시스템상의 오늘 날짜 반환하는 인자없는 함수, 연산가능
2. to_date(문자열) ; 문자형 데이터를 날짜형 데이터로 변경 
select sysdate from dual;
select sysdate + 26 from dual;
select sysdate - '96/06/26' from dual; -- 오류
select trunc(sysdate - to_date('20/06/01')) from dual;
select trunc(to_date('20/06/01') - sysdate ) from dual;

3. to_char('날짜', '날짜형') : 날짜형 데이터를 문장형 데이터로 변경
select to_char(to_date('2020/06/05','yyyy-mm-dd'),'yyyymmdd') from dual;

4. ADD_MONTHS(date, 숫자) : 날짜형의 날짜에서 지정한 달만큼 더함 (1:다음달, -1:지난달)
select sysdate, add_months(sysdate,4),add_months(sysdate,-4) from dual;
5.last_day(date) : 해당 달의 마지막 날짜 
select last_day(sysdate), 
        last_day(add_months(sysdate,4)),
        last_day(add_months(sysdate,-4)) from dual;
        
6. 해당 요일의 가장 가까운 날짜(미래) : next_day(날짜,요일)
select sysdate, next_day(sysdate,'수요일'), next_day(sysdate,'목요일')from dual;

7. 기간구하기 : moths_between(끝날짜, 시작날짜) : 월 단위
select months_between(sysdate, '2020/01/01') from dual;
select trunc(months_between(sysdate, to_date('2020/01/01'))) from dual;

=============================================================================

NULL 값이란? 아직 지정되지 않은 값
NULL 값은 ‘0’, ‘’ (빈 문자), ‘ ’ (공백) 등과 다른 특별한 값
NULL 값은 비교 연산자로 비교가 불가능함.
NULL 값의 연산을 수행하면 결과 역시 NULL 값으로 반환됨.

1) is null => 조건식에서 null 찾을 찾을 때 사용 
2) is not null => 조건식에서 null이 아닌 것을 찾을 때 사용 
3) NVL : null를 다른 데이터값으로 변경 한다.
   NVL (컬러명, null 대신 들어갈 값)
select * from customer;
-- customer 테이블에서 null phone 컬럼에서 null 값 가진 고객의 이름
select name from customer where phone = null; -- null를 못찾음
select name from customer where phone is null; -- 정답
select name from customer where phone is not null;
select name, phone , NVL(phone,'0100-9000-0001') from customer ;

=============================================================================
rownum : 오라클 내부에서 생성되는 가상 컬럼, sql 조회 결과의 순번을 나타냄

시퀀스 : 오라클에서 자동으로 고유 숫자값을 생성해 주며, 주로 기본키에 생성할때 사용
** MySQL, MariaDB에서는 auto_increment 
생성방법
create sequence 이름(테이블_seq)
    increment by 증가숫자
    start with 시작숫자
    nocycle (다시 시작하지 않는다.);

create sequence members_seq
increment by 1
start with 1
nocycle;

사용법 : members_seq.nextval => 자동으로 숫자 부여
select * from members;

insert into members 
values(members_seq.nextval,'hong','1111','홍길동', 24, sysdate);

insert into members 
values(members_seq.nextval,'park','1111','박찬호', 37, sysdate);
======================================================================
뷰 (View) : 가상 테이블, 실제 메모리에 존재하지 않는다.
            (물리적으로 저장되는 데이블이 아니다.)
            일반적인 사용자는 뷰를 만들 수 없다.
            뷰는 수정, 삭제, 삽입 이 목적이 아니라 
            검색(select)가 목적이다.
            여러 테이블를 하나로 합쳐서 하나의 뷰로 만들 수 도 있고
            하나의 테이블를 이용해서 여러개의 뷰를 만들 수도 있다.
            같은이름의 뷰가 존재하면 오류발생
             












